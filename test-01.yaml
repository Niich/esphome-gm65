substitutions:
  name: "esp-barcode-01"
  device_description: "esp8266 with UART scanner"
  friendly_name: "mqtt test device"
  bb_server: "YOUR Barcode Buddy address"
  bbuddy_api_key: "YOUR KEY"

esphome:
  name: ${name}
  includes:
    - uart_read_line_sensor.h

esp8266:
  board: esp01_1m

# Enable logging
logger:
  # level: DEBUG
  baud_rate: 0

ota:
  password: !secret ota_password 

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: ".network"

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

uart:
    id: uart_scanner
    baud_rate: 9600
    tx_pin: GPIO5
    rx_pin: GPIO4
    stop_bits: 1
    parity: NONE
    data_bits: 8

http_request:
  id: bb_request
  useragent: esphome/device
  timeout: 10s

text_sensor:
  - platform: custom
    lambda: |-
      auto gm65_component = new UartReadLineSensor(id(uart_scanner));
      App.register_component(gm65_component);
      return {gm65_component};
    text_sensors:
    - id: "uart_readline"
      name: scanner
      on_value:
        then:
        - http_request.post:
            # Send the scanned code
            url: "https://${bb_server}/api/action/scan"
            verify_ssl: false
            headers:
              Accept: "application/json"
              Content-Type: 'multipart/form-data; boundary="HGhctEWB8hbsfWCA"'
              BBUDDY-API-KEY: "${bbuddy_api_key}"
            body: !lambda |-
              return ((std::string) "--HGhctEWB8hbsfWCA\r\nContent-Disposition: form-data; name=\"barcode\"\r\n" + id(uart_readline).state ).c_str();
